{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "542a8b1f",
   "metadata": {},
   "source": [
    "## Executive Summary\n",
    "\n",
    "The analysis shows that Clusters 3 & 4 have the highest number of people, so the subsequent analysis and strategies will target these clusters.\n",
    "\n",
    "Time managers:\n",
    "Although cluster 4 has the highest number of people for both males and females, they are the least likely to research products before purchase. Therefore, showing that this cluster has impulse buyers. The first recommendation is to develop emotional, upbeat, and positive marketing campaigns because these campaigns are more likely to attract impulse buyers.\n",
    "\n",
    "Apprentice:\n",
    "Apprentice consists of 66% male and 34% female. 66% of people have more than 11 apps out of which 29% of people have more than 31 apps. Most people are not apprentices and the majority of people are neutral when it comes to using technology for learning new things. The marketing budget for them should be low, as they are unlikely to buy new tech products that they consider disruptive to their current lifestyle.\n",
    "\n",
    "\n",
    "Opinion leaders:\n",
    "Opinion leaders consist of 65% female and 35% male. 82% of people have more than 11 apps out of which 39% of people have more than 31 apps. After analyzing clusters three and four, the company can target those who are influential that way they can market our products through their platform.\n",
    "\n",
    "\n",
    "Optimistic:\n",
    "Cluster three is creatives and active. For this cluster, the company can invest in developing apps with daily challenges, providing the opportunity for customers to share their wins and progress. 43% of Optimistic are aged 18 - 29 years, further reinstating that the company should focus on apps for active customers. Also, 70% of Optimistic people have over ten apps on their devices, making it possible to have different apps that cater to different aspects of their lifestyle. \n",
    "\n",
    "\n",
    "Influencer:\n",
    "Clusters 3 & 4 are influencers who like to be in control. 46% of influencers have over 31 apps on their devices, and 41% of them are single. They are mostly female. We will recommend that we employ members of these clusters as influencers by introducing a referral program in which they are rewarded for referring and acquiring new customers."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d94c6db",
   "metadata": {},
   "source": [
    "<h2>Part I: Introduction and Preparation</h2><br>\n",
    "\n",
    "The dataset represents the app download behavior of consumers as well as other information. The demographic and psychometric information for each consumer were captured by survey for analysis to help the marketing department segment users.\n",
    "\n",
    "\n",
    "<br><h4>a) Imports and Loading the Dataset</h4>\n",
    "1. Import the following packages:\n",
    "\n",
    "2. Load the <strong> Mobile_App_Survey_Data.xlsx </strong> dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc554c32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>caseID</th>\n",
       "      <th>q1</th>\n",
       "      <th>q2r1</th>\n",
       "      <th>q2r2</th>\n",
       "      <th>q2r3</th>\n",
       "      <th>q2r4</th>\n",
       "      <th>q2r5</th>\n",
       "      <th>q2r6</th>\n",
       "      <th>q2r7</th>\n",
       "      <th>q2r8</th>\n",
       "      <th>q2r9</th>\n",
       "      <th>q2r10</th>\n",
       "      <th>q4r1</th>\n",
       "      <th>q4r2</th>\n",
       "      <th>q4r3</th>\n",
       "      <th>q4r4</th>\n",
       "      <th>q4r5</th>\n",
       "      <th>q4r6</th>\n",
       "      <th>q4r7</th>\n",
       "      <th>q4r8</th>\n",
       "      <th>q4r9</th>\n",
       "      <th>q4r10</th>\n",
       "      <th>q4r11</th>\n",
       "      <th>q11</th>\n",
       "      <th>q12</th>\n",
       "      <th>q13r1</th>\n",
       "      <th>q13r2</th>\n",
       "      <th>q13r3</th>\n",
       "      <th>q13r4</th>\n",
       "      <th>q13r5</th>\n",
       "      <th>q13r6</th>\n",
       "      <th>q13r7</th>\n",
       "      <th>q13r8</th>\n",
       "      <th>q13r9</th>\n",
       "      <th>q13r10</th>\n",
       "      <th>q13r11</th>\n",
       "      <th>q13r12</th>\n",
       "      <th>q24r1</th>\n",
       "      <th>q24r2</th>\n",
       "      <th>q24r3</th>\n",
       "      <th>q24r4</th>\n",
       "      <th>q24r5</th>\n",
       "      <th>q24r6</th>\n",
       "      <th>q24r7</th>\n",
       "      <th>q24r8</th>\n",
       "      <th>q24r9</th>\n",
       "      <th>q24r10</th>\n",
       "      <th>q24r11</th>\n",
       "      <th>q24r12</th>\n",
       "      <th>q25r1</th>\n",
       "      <th>q25r2</th>\n",
       "      <th>q25r3</th>\n",
       "      <th>q25r4</th>\n",
       "      <th>q25r5</th>\n",
       "      <th>q25r6</th>\n",
       "      <th>q25r7</th>\n",
       "      <th>q25r8</th>\n",
       "      <th>q25r9</th>\n",
       "      <th>q25r10</th>\n",
       "      <th>q25r11</th>\n",
       "      <th>q25r12</th>\n",
       "      <th>q26r18</th>\n",
       "      <th>q26r3</th>\n",
       "      <th>q26r4</th>\n",
       "      <th>q26r5</th>\n",
       "      <th>q26r6</th>\n",
       "      <th>q26r7</th>\n",
       "      <th>q26r8</th>\n",
       "      <th>q26r9</th>\n",
       "      <th>q26r10</th>\n",
       "      <th>q26r11</th>\n",
       "      <th>q26r12</th>\n",
       "      <th>q26r13</th>\n",
       "      <th>q26r14</th>\n",
       "      <th>q26r15</th>\n",
       "      <th>q26r16</th>\n",
       "      <th>q26r17</th>\n",
       "      <th>q48</th>\n",
       "      <th>q49</th>\n",
       "      <th>q50r1</th>\n",
       "      <th>q50r2</th>\n",
       "      <th>q50r3</th>\n",
       "      <th>q50r4</th>\n",
       "      <th>q50r5</th>\n",
       "      <th>q54</th>\n",
       "      <th>q55</th>\n",
       "      <th>q56</th>\n",
       "      <th>q57</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   caseID  q1  q2r1  q2r2  q2r3  q2r4  q2r5  q2r6  q2r7  q2r8  q2r9  q2r10  q4r1  q4r2  q4r3  q4r4  q4r5  q4r6  q4r7  q4r8  q4r9  q4r10  q4r11  q11  q12  q13r1  q13r2  q13r3  q13r4  q13r5  q13r6  q13r7  q13r8  q13r9  q13r10  q13r11  q13r12  q24r1  q24r2  q24r3  q24r4  q24r5  q24r6  q24r7  q24r8  q24r9  q24r10  q24r11  q24r12  q25r1  q25r2  q25r3  q25r4  q25r5  q25r6  q25r7  q25r8  q25r9  q25r10  q25r11  q25r12  q26r18  q26r3  q26r4  q26r5  q26r6  q26r7  q26r8  q26r9  q26r10  q26r11  q26r12  q26r13  q26r14  q26r15  q26r16  q26r17  q48  q49  q50r1  q50r2  q50r3  q50r4  q50r5  q54  q55  q56  q57\n",
       "0       1  10     0     0     1     0     0     0     0     0     0      0     0     0     0     0     0     1     0     0     0      0      0    1    1      1      4      4      4      4      4      4      4      4       4       4       4      5      3      3      5      5      4      5      3      4       3       3       3      5      5      4      5      4      5      4      5      3       3       4       5       5      2      3      3      3      5      5      3       4       6       4       4       4       4       4       4    3    4      1      0      0      0      0    2    2    5    1\n",
       "1       2   5     0     0     1     0     0     0     0     0     0      0     0     1     1     1     0     0     0     0     1      0      0    3    3      1      2      2      1      2      2      2      2      2       2       2       2      1      1      2      1      1      1      1      1      1       1       2       2      1      2      1      2      2      1      2      1      2       2       2       1       2      2      2      2      1      1      3      2       2       1       1       2       2       2       2       2    5    1      0      1      1      0      0    3    2   10    2\n",
       "2       3   7     0     0     0     0     1     0     0     0     0      0     0     0     0     0     1     1     0     0     0      0      0    1    5      1      3      4      2      4      2      4      4      2       4       4       3      5      3      2      3      3      3      2      3      3       4       5       3      3      5      4      2      5      5      4      4      4       3       3       4       6      1      4      3      5      6      5      5       5       3       5       5       4       5       3       3    4    4      0      0      0      1      0    2    2    6    1\n",
       "3       4   7     1     1     0     0     0     0     0     0     0      0     0     0     1     1     0     1     0     0     0      0      0    2    2      1      4      4      4      4      2      4      4      2       4       4       4      2      1      1      2      1      1      1      2      2       2       2       3      2      2      2      2      1      2      1      3      2       2       2       1       3      1      1      2      2      4      3      2       2       2       3       2       3       2       2       2    2    1      0      1      1      0      0    1    2    5    1\n",
       "4       6   2     1     0     0     0     0     0     0     0     0      0     1     0     0     0     0     0     0     0     0      0      0    2    3      1      2      3      3      3      2      2      2      4       1       2       2      3      3      3      2      2      3      3      2      3       3       2       2      3      2      3      3      3      3      3      2      2       2       1       1       2      2      1      4      3      3      3      2       3       3       3       3       3       2       3       1    5    2      1      0      0      0      0    3    2    4    2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy             as np                   # mathematical essentials\n",
    "import pandas            as pd                   # data science essentials\n",
    "import matplotlib.pyplot as plt                  # fundamental data visualization\n",
    "import seaborn           as sns                  # enhanced visualization\n",
    "from sklearn.preprocessing import StandardScaler # standard scaler\n",
    "from sklearn.decomposition import PCA            # pca\n",
    "\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)\n",
    "pd.set_option('display.max_colwidth', 100)\n",
    "\n",
    "file = './Mobile_App_Survey_Data.xlsx'\n",
    "survey = pd.read_excel(io = file,\n",
    "                      header = 0)\n",
    "survey.head(n = 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd6a2da2",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<h3>Initial Exploration of the Dataset</h3>\n",
    "\n",
    "<h4>a) Checking the number of features (columns) present in the dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "652a2434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['caseID', 'q1', 'q2r1', 'q2r2', 'q2r3', 'q2r4', 'q2r5', 'q2r6', 'q2r7', 'q2r8', 'q2r9', 'q2r10', 'q4r1', 'q4r2', 'q4r3', 'q4r4', 'q4r5', 'q4r6', 'q4r7', 'q4r8', 'q4r9', 'q4r10', 'q4r11', 'q11', 'q12', 'q13r1', 'q13r2', 'q13r3', 'q13r4', 'q13r5', 'q13r6', 'q13r7', 'q13r8', 'q13r9', 'q13r10', 'q13r11', 'q13r12', 'q24r1', 'q24r2', 'q24r3', 'q24r4', 'q24r5', 'q24r6', 'q24r7', 'q24r8', 'q24r9', 'q24r10', 'q24r11', 'q24r12', 'q25r1', 'q25r2', 'q25r3', 'q25r4', 'q25r5', 'q25r6', 'q25r7', 'q25r8', 'q25r9', 'q25r10', 'q25r11', 'q25r12', 'q26r18', 'q26r3', 'q26r4', 'q26r5', 'q26r6', 'q26r7', 'q26r8', 'q26r9', 'q26r10', 'q26r11', 'q26r12', 'q26r13', 'q26r14', 'q26r15', 'q26r16', 'q26r17', 'q48', 'q49', 'q50r1', 'q50r2', 'q50r3', 'q50r4', 'q50r5', 'q54', 'q55', 'q56', 'q57'], dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survey.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dee90468",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<h4> Two lists were formed from the psychometric questions. In one list, q24 and q25 were grouped together because they have a similar theme and to prevent correlation during analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1708da20",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_work1  = ['q24r1', 'q24r2', 'q24r3', 'q24r4', 'q24r5', 'q24r6', 'q24r7', 'q24r8', 'q24r9', 'q24r10', 'q24r11', 'q24r12', 'q26r18', 'q26r3', 'q26r4', 'q26r5', 'q26r6', 'q26r7', 'q26r8', 'q26r9', 'q26r10', 'q26r11', 'q26r12', 'q26r13', 'q26r14', 'q26r15', 'q26r16', 'q26r17'  ]\n",
    "list_work2  = ['q25r1', 'q25r2', 'q25r3', 'q25r4', 'q25r5', 'q25r6', 'q25r7', 'q25r8', 'q25r9', 'q25r10', 'q25r11', 'q25r12']\n",
    "\n",
    "psycometric = survey.loc[:, list_work1]\n",
    "psycometric_2 = survey.loc[:, list_work2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d29efc",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<h4> User-Defined Functions</strong><br>\n",
    "\n",
    "Run the following code to load the user-defined functions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6283433",
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# scree_plot\n",
    "########################################\n",
    "def scree_plot(pca_object, export = False):\n",
    "    \"\"\"\n",
    "    Visualizes a scree plot from a pca object.\n",
    "    \n",
    "    PARAMETERS\n",
    "    ----------\n",
    "    pca_object | A fitted pca object\n",
    "    export     | Set to True if you would like to save the scree plot to the\n",
    "               | current working directory (default: False)\n",
    "    \"\"\"\n",
    "    # building a scree plot\n",
    "\n",
    "    # setting plot size\n",
    "    fig, ax = plt.subplots(figsize=(10, 8))\n",
    "    features = range(pca_object.n_components_)\n",
    "\n",
    "\n",
    "    # developing a scree plot\n",
    "    plt.plot(features,\n",
    "             pca_object.explained_variance_ratio_,\n",
    "             linewidth = 2,\n",
    "             marker = 'o',\n",
    "             markersize = 10,\n",
    "             markeredgecolor = 'black',\n",
    "             markerfacecolor = 'grey')\n",
    "\n",
    "\n",
    "    # setting more plot options\n",
    "    plt.title('Scree Plot')\n",
    "    plt.xlabel('PCA feature')\n",
    "    plt.ylabel('Explained Variance')\n",
    "    plt.xticks(features)\n",
    "\n",
    "    #if export == True:\n",
    "    \n",
    "        # exporting the plot\n",
    "        #plt.savefig('./__analysis_images/top_customers_correlation_scree_plot.png')\n",
    "        \n",
    "    # displaying the plot\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "########################################\n",
    "# unsupervised_scaler\n",
    "########################################\n",
    "def unsupervised_scaler_row(df):\n",
    "    \"\"\"\n",
    "    Standardizes a dataset (mean = 0, variance = 1). Returns a new DataFrame.\n",
    "    Requires sklearn.preprocessing.StandardScaler()\n",
    "    \n",
    "    PARAMETERS\n",
    "    ----------\n",
    "    df     | DataFrame to be used for scaling\n",
    "    \"\"\"\n",
    "\n",
    "    # INSTANTIATING a StandardScaler() object\n",
    "    scaler = StandardScaler()\n",
    "\n",
    "\n",
    "    # FITTING the scaler with the data\n",
    "    scaler.fit(df.transpose())\n",
    "\n",
    "\n",
    "    # TRANSFORMING our data after fit\n",
    "    x_scaled = scaler.transform(df.transpose())\n",
    "\n",
    "    \n",
    "    # converting scaled data into a DataFrame\n",
    "    new_df = pd.DataFrame(x_scaled)\n",
    "\n",
    "\n",
    "    # reattaching column names\n",
    "    #new_df.columns = df.columns\n",
    "    \n",
    "    return new_df.transpose()\n",
    "def unsupervised_scaler(df):\n",
    "    \"\"\"\n",
    "    Standardizes a dataset (mean = 0, variance = 1). Returns a new DataFrame.\n",
    "    Requires sklearn.preprocessing.StandardScaler()\n",
    "    \n",
    "    PARAMETERS\n",
    "    ----------\n",
    "    df     | DataFrame to be used for scaling\n",
    "    \"\"\"\n",
    "\n",
    "    # INSTANTIATING a StandardScaler() object\n",
    "    scaler = StandardScaler()\n",
    "\n",
    "\n",
    "    # FITTING the scaler with the data\n",
    "    scaler.fit(df)\n",
    "\n",
    "\n",
    "    # TRANSFORMING our data after fit\n",
    "    x_scaled = scaler.transform(df)\n",
    "\n",
    "    \n",
    "    # converting scaled data into a DataFrame\n",
    "    new_df = pd.DataFrame(x_scaled)\n",
    "\n",
    "\n",
    "    # reattaching column names\n",
    "    new_df.columns = df.columns\n",
    "    \n",
    "    return new_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "867ae4c3",
   "metadata": {},
   "source": [
    "<h4>a) Describe each quantitative column using descriptive statistics. Descriptive statistics helps us to better understand our dataset</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a128af71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>q24r1</th>\n",
       "      <th>q24r2</th>\n",
       "      <th>q24r3</th>\n",
       "      <th>q24r4</th>\n",
       "      <th>q24r5</th>\n",
       "      <th>q24r6</th>\n",
       "      <th>q24r7</th>\n",
       "      <th>q24r8</th>\n",
       "      <th>q24r9</th>\n",
       "      <th>q24r10</th>\n",
       "      <th>q24r11</th>\n",
       "      <th>q24r12</th>\n",
       "      <th>q26r18</th>\n",
       "      <th>q26r3</th>\n",
       "      <th>q26r4</th>\n",
       "      <th>q26r5</th>\n",
       "      <th>q26r6</th>\n",
       "      <th>q26r7</th>\n",
       "      <th>q26r8</th>\n",
       "      <th>q26r9</th>\n",
       "      <th>q26r10</th>\n",
       "      <th>q26r11</th>\n",
       "      <th>q26r12</th>\n",
       "      <th>q26r13</th>\n",
       "      <th>q26r14</th>\n",
       "      <th>q26r15</th>\n",
       "      <th>q26r16</th>\n",
       "      <th>q26r17</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "      <td>1552.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.155928</td>\n",
       "      <td>1.703608</td>\n",
       "      <td>2.219072</td>\n",
       "      <td>3.236469</td>\n",
       "      <td>2.871134</td>\n",
       "      <td>1.808634</td>\n",
       "      <td>2.070876</td>\n",
       "      <td>1.989691</td>\n",
       "      <td>3.811856</td>\n",
       "      <td>2.050902</td>\n",
       "      <td>2.441366</td>\n",
       "      <td>1.980026</td>\n",
       "      <td>3.016753</td>\n",
       "      <td>2.150129</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000644</td>\n",
       "      <td>3.036727</td>\n",
       "      <td>3.249356</td>\n",
       "      <td>3.279639</td>\n",
       "      <td>2.588918</td>\n",
       "      <td>2.800258</td>\n",
       "      <td>3.859536</td>\n",
       "      <td>3.102448</td>\n",
       "      <td>3.330541</td>\n",
       "      <td>3.322809</td>\n",
       "      <td>2.416881</td>\n",
       "      <td>3.121778</td>\n",
       "      <td>2.548325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.539982</td>\n",
       "      <td>0.958070</td>\n",
       "      <td>1.404955</td>\n",
       "      <td>1.568183</td>\n",
       "      <td>1.445825</td>\n",
       "      <td>1.047598</td>\n",
       "      <td>1.102194</td>\n",
       "      <td>1.039465</td>\n",
       "      <td>1.613743</td>\n",
       "      <td>1.091843</td>\n",
       "      <td>1.278868</td>\n",
       "      <td>1.030915</td>\n",
       "      <td>1.506822</td>\n",
       "      <td>1.157495</td>\n",
       "      <td>1.407816</td>\n",
       "      <td>1.325493</td>\n",
       "      <td>1.417607</td>\n",
       "      <td>1.469768</td>\n",
       "      <td>1.464965</td>\n",
       "      <td>1.355013</td>\n",
       "      <td>1.363634</td>\n",
       "      <td>1.756150</td>\n",
       "      <td>1.420743</td>\n",
       "      <td>1.531410</td>\n",
       "      <td>1.417691</td>\n",
       "      <td>1.186991</td>\n",
       "      <td>1.435478</td>\n",
       "      <td>1.278795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             q24r1        q24r2        q24r3        q24r4        q24r5        q24r6        q24r7        q24r8        q24r9       q24r10       q24r11       q24r12       q26r18        q26r3        q26r4        q26r5        q26r6        q26r7        q26r8        q26r9       q26r10       q26r11       q26r12       q26r13       q26r14       q26r15       q26r16       q26r17\n",
       "count  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000  1552.000000\n",
       "mean      3.155928     1.703608     2.219072     3.236469     2.871134     1.808634     2.070876     1.989691     3.811856     2.050902     2.441366     1.980026     3.016753     2.150129     3.000000     3.000644     3.036727     3.249356     3.279639     2.588918     2.800258     3.859536     3.102448     3.330541     3.322809     2.416881     3.121778     2.548325\n",
       "std       1.539982     0.958070     1.404955     1.568183     1.445825     1.047598     1.102194     1.039465     1.613743     1.091843     1.278868     1.030915     1.506822     1.157495     1.407816     1.325493     1.417607     1.469768     1.464965     1.355013     1.363634     1.756150     1.420743     1.531410     1.417691     1.186991     1.435478     1.278795\n",
       "min       1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000     1.000000\n",
       "25%       2.000000     1.000000     1.000000     2.000000     2.000000     1.000000     1.000000     1.000000     3.000000     1.000000     1.000000     1.000000     2.000000     1.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     2.000000     1.000000\n",
       "50%       3.000000     1.000000     2.000000     3.000000     3.000000     1.000000     2.000000     2.000000     4.000000     2.000000     2.000000     2.000000     3.000000     2.000000     3.000000     3.000000     3.000000     3.000000     3.000000     2.000000     3.000000     4.000000     3.000000     3.000000     3.000000     2.000000     3.000000     2.000000\n",
       "75%       4.000000     2.000000     3.000000     4.000000     4.000000     2.000000     3.000000     3.000000     5.000000     3.000000     3.000000     3.000000     4.000000     3.000000     4.000000     4.000000     4.000000     4.000000     4.000000     3.000000     4.000000     6.000000     4.000000     4.000000     4.000000     3.000000     4.000000     3.000000\n",
       "max       6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000     6.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psycometric.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4f55cca",
   "metadata": {},
   "source": [
    "<h4> Run the following code to generate histograms for each of the features in the dataset.</strong>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "91440472",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # setting figure size\n",
    "# fig, ax = plt.subplots(figsize = (12, 8))\n",
    "\n",
    "# # initializing a counter\n",
    "# count = 0\n",
    "\n",
    "# # looping to create visualizations\n",
    "# for col in psycometric:\n",
    "#     # condition to break\n",
    "#     if count == 15:\n",
    "#         break\n",
    "    \n",
    "#     # increasing count\n",
    "#     count += 1\n",
    "    \n",
    "#     # preparing histograms\n",
    "#     plt.subplot(3, 5, count)\n",
    "#     sns.histplot(x = psycometric[col],)\n",
    "\n",
    "\n",
    "# # formatting, saving, and displaying the plot\n",
    "# plt.tight_layout()\n",
    "# #plt.savefig('./__analysis_images/customers_df_histograms.png')\n",
    "# plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc04c4d1",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4> Write a loop to logarithmically transform the non-demographic features of the dataset.</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "73b4d6e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['q24r1', 'q24r2', 'q24r3', 'q24r4', 'q24r5', 'q24r6', 'q24r7', 'q24r8', 'q24r9', 'q24r10', 'q24r11', 'q24r12', 'q26r18', 'q26r3', 'q26r4', 'q26r5', 'q26r6', 'q26r7', 'q26r8', 'q26r9', 'q26r10', 'q26r11', 'q26r12', 'q26r13', 'q26r14', 'q26r15', 'q26r16', 'q26r17', 'log_q24r2', 'log_q24r3', 'log_q24r6', 'log_q24r7', 'log_q24r8', 'log_q24r10', 'log_q24r12', 'log_q26r3'], dtype='object')\n",
      "Index(['q25r1', 'q25r2', 'q25r3', 'q25r4', 'q25r5', 'q25r6', 'q25r7', 'q25r8', 'q25r9', 'q25r10', 'q25r11', 'q25r12', 'log_q25r7'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for col in psycometric: \n",
    "    if col in ('caseID'):\n",
    "        continue\n",
    "    if psycometric[col].skew() >= 1:\n",
    "        psycometric['log_' + col ] = np.log(psycometric[col] + 0.99)\n",
    "        \n",
    "for col in psycometric_2: \n",
    "    if col in ('caseID'):\n",
    "        continue\n",
    "    if psycometric_2[col].skew() >= 1:\n",
    "        psycometric_2['log_' + col ] = np.log(psycometric_2[col] + 0.99)\n",
    "    \n",
    "\n",
    "# checking results\n",
    "print(psycometric.columns)\n",
    "print(psycometric_2.columns)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c570c200",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "Explanatory variables are scaled before developing a principal component analysis algorithm.<br>\n",
    "* Drop demographic data and the non-logarithmic features. Store the result as psychometric feature\n",
    "* Instantiate a StandardScaler( ) object\n",
    "* Fit the scaler object to psychometric feature\n",
    "* Transform psychometric feature using the scaler object\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6a78c6d0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "q24r1         2.370016\n",
      "q24r4         2.457613\n",
      "q24r5         2.089064\n",
      "q24r9         2.602488\n",
      "q24r11        1.634449\n",
      "q26r18        2.269049\n",
      "q26r4         1.980670\n",
      "q26r5         1.755799\n",
      "q26r6         2.008316\n",
      "q26r7         2.158827\n",
      "q26r8         2.144740\n",
      "q26r9         1.834877\n",
      "q26r10        1.858299\n",
      "q26r11        3.082074\n",
      "q26r12        2.017210\n",
      "q26r13        2.343706\n",
      "q26r14        2.008552\n",
      "q26r15        1.408040\n",
      "q26r16        2.059268\n",
      "q26r17        1.634263\n",
      "log_q24r2     0.095709\n",
      "log_q24r3     0.156320\n",
      "log_q24r6     0.108981\n",
      "log_q24r7     0.112752\n",
      "log_q24r8     0.105194\n",
      "log_q24r10    0.113489\n",
      "log_q24r12    0.104412\n",
      "log_q26r3     0.120790\n",
      "dtype: float64 \n",
      "\n",
      "\n",
      "0     1.0\n",
      "1     1.0\n",
      "2     1.0\n",
      "3     1.0\n",
      "4     1.0\n",
      "5     1.0\n",
      "6     1.0\n",
      "7     1.0\n",
      "8     1.0\n",
      "9     1.0\n",
      "10    1.0\n",
      "11    1.0\n",
      "12    1.0\n",
      "13    1.0\n",
      "14    1.0\n",
      "15    1.0\n",
      "16    1.0\n",
      "17    1.0\n",
      "18    1.0\n",
      "19    1.0\n",
      "20    1.0\n",
      "21    1.0\n",
      "22    1.0\n",
      "23    1.0\n",
      "24    1.0\n",
      "25    1.0\n",
      "26    1.0\n",
      "27    1.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "drop_lst = ['q24r1', 'q24r2', 'q24r3', 'q24r4', 'q24r5', 'q24r6', 'q24r7', 'q24r8', 'q24r9', 'q24r10', 'q24r11', \n",
    "            'q24r12', 'q25r1', 'q25r2', 'q25r3', 'q25r4', 'q25r5', 'q25r6', 'q25r7', 'q25r8', 'q25r9', 'q25r10', \n",
    "            'q25r11', 'q25r12', 'q26r18', 'q26r3', 'q26r4', 'q26r5', 'q26r6', 'q26r7', 'q26r8', 'q26r9', 'q26r10', \n",
    "            'q26r11', 'q26r12', 'q26r13', 'q26r14', 'q26r15', 'q26r16', 'q26r17']\n",
    "drop_lst1 = ['q24r2', 'q24r3', 'q24r6', 'q24r7', 'q24r8', 'q24r10', 'q24r12'  , 'q26r3']\n",
    "drop_lst2 = ['q25r7']\n",
    "#purchase_behavior = psycometric.drop(drop_lst, axis = 1)\n",
    "\n",
    "psycometric_behavior = psycometric.drop(drop_lst1, axis = 1)\n",
    "# applying the unsupervised_scaler function for rows\n",
    "pyscometric_scaled_vp = unsupervised_scaler_row(df = psycometric_behavior)\n",
    "# applying the unsupervised_scaler function for columns\n",
    "pyscometric_scaled = unsupervised_scaler(df = pyscometric_scaled_vp)\n",
    "#pyscometric_scaled = unsupervised_scaler(df = psycometric_behavior)\n",
    "\n",
    "# checking pre- and post-scaling variance\n",
    "print(np.var(psycometric_behavior), '\\n\\n')\n",
    "print(np.var(pyscometric_scaled))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37dccd61",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part III: Principal Component Analysis</h2><br>\n",
    "We used scaled data to instantiate, fit, and transform a PCA model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9579183c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # setting plot size\n",
    "# fig, ax = plt.subplots(figsize = (8, 8))\n",
    "\n",
    "\n",
    "# # developing a correlation matrix object\n",
    "# df_corr = psycometric.corr(method= 'pearson').round(2)\n",
    "\n",
    "\n",
    "# # creating a correlation heatmap\n",
    "# sns.heatmap(df_corr,\n",
    "#             cmap = 'Blues',\n",
    "#             square = True,\n",
    "#             annot = True)\n",
    "\n",
    "\n",
    "# # rendering the heatmap\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0dd00b0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (1552, 28)\n",
      "PCA shape     : (1552, 5)\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a PCA object with no limit to principal components\n",
    "pca = PCA(n_components = 5,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# FITTING and TRANSFORMING the scaled data\n",
    "pyscometric_pca = pca.fit_transform(pyscometric_scaled)\n",
    "\n",
    "\n",
    "# comparing dimensions of each DataFrame\n",
    "print(\"Original shape:\", pyscometric_scaled.shape)\n",
    "print(\"PCA shape     :\", pyscometric_pca.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "628b242c",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part IV: Evaluating PCA Algorithms</h2><br>\n",
    "Printing its component number as well as its explained variance ratio by looping each principal component.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "95ccb69e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PC 1: 0.212\n",
      "PC 2: 0.067\n",
      "PC 3: 0.06\n",
      "PC 4: 0.052\n",
      "PC 5: 0.045\n",
      "total : 0.436\n"
     ]
    }
   ],
   "source": [
    "# component number counter\n",
    "component_number = 0\n",
    "accum = 0\n",
    "# looping over each principal component\n",
    "for variance in pca.explained_variance_ratio_:\n",
    "    component_number += 1\n",
    "    accum = variance.round(3) + accum\n",
    "    \n",
    "    print(f\"PC {component_number}: {variance.round(3)}\")\n",
    "\n",
    "print(f\"total : {accum}\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ee29dcb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "q25r1        1.251600\n",
      "q25r2        1.494538\n",
      "q25r3        1.175736\n",
      "q25r4        1.214625\n",
      "q25r5        1.364530\n",
      "q25r6        2.392788\n",
      "q25r8        1.536148\n",
      "q25r9        1.247248\n",
      "q25r10       1.296109\n",
      "q25r11       1.364405\n",
      "q25r12       1.770293\n",
      "log_q25r7    0.104126\n",
      "dtype: float64 \n",
      "\n",
      "\n",
      "0     1.0\n",
      "1     1.0\n",
      "2     1.0\n",
      "3     1.0\n",
      "4     1.0\n",
      "5     1.0\n",
      "6     1.0\n",
      "7     1.0\n",
      "8     1.0\n",
      "9     1.0\n",
      "10    1.0\n",
      "11    1.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "drop_lst2 = ['q25r7']\n",
    "#purchase_behavior = psycometric.drop(drop_lst, axis = 1)\n",
    "\n",
    "psycometric_behavior_2 = psycometric_2.drop(drop_lst2, axis = 1)\n",
    "# applying the unsupervised_scaler function for rows\n",
    "pyscometric_scaled_vp_2 = unsupervised_scaler_row(df = psycometric_behavior_2)\n",
    "# applying the unsupervised_scaler function for columns\n",
    "pyscometric_scaled_2 = unsupervised_scaler(df = pyscometric_scaled_vp_2)\n",
    "#pyscometric_scaled = unsupervised_scaler(df = psycometric_behavior)\n",
    "\n",
    "# checking pre- and post-scaling variance\n",
    "print(np.var(psycometric_behavior_2), '\\n\\n')\n",
    "print(np.var(pyscometric_scaled_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "141e36f4",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>c) Call the scree_plot function on the PCA object.</h4>\n",
    "<br><br>\n",
    "<strong>Scree Plots</strong><br>\n",
    "Looking for an \"elbow\" in the plot, where the line connects each principal component becomes less steep. Also, the slice was in the fifth PCA because the difference of variance between the sixth and fifth wasn't significant. On the other hand, as a business, we have to take care of the resources and the budget that we are going to assign for every Persona that could be found in the analysis. Moreover, the first PCA has an explained variance of 0.21 which is good for our posterior analysis because it can give us significant differences among the different questions of the survey."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2de39bb8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scree_plot (pca_object  = pca,\n",
    "            export = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7e024d98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (1552, 12)\n",
      "PCA shape     : (1552, 5)\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a PCA object with no limit to principal components\n",
    "pca_2 = PCA(n_components = 5,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# FITTING and TRANSFORMING the scaled data\n",
    "pyscometric_pca_2 = pca_2.fit_transform(pyscometric_scaled_2)\n",
    "\n",
    "\n",
    "# comparing dimensions of each DataFrame\n",
    "print(\"Original shape:\", pyscometric_scaled_2.shape)\n",
    "print(\"PCA shape     :\", pyscometric_pca_2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "18ea8312",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PC 1: 0.177\n",
      "PC 2: 0.111\n",
      "PC 3: 0.103\n",
      "PC 4: 0.096\n",
      "PC 5: 0.09\n",
      "total : 0.577\n"
     ]
    }
   ],
   "source": [
    "# component number counter\n",
    "component_number = 0\n",
    "accum = 0\n",
    "# looping over each principal component\n",
    "for variance in pca_2.explained_variance_ratio_:\n",
    "    component_number += 1\n",
    "    accum = variance.round(3) + accum\n",
    "    \n",
    "    print(f\"PC {component_number}: {variance.round(3)}\")\n",
    "\n",
    "print(f\"total : {accum}\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "97d5d848",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scree_plot (pca_object  = pca_2,\n",
    "            export = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "89d4a877",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# # setting plot size\n",
    "# fig, ax = plt.subplots(figsize = (12, 12))\n",
    "\n",
    "\n",
    "# # developing a PC to feature heatmap\n",
    "# sns.heatmap(pca.components_, \n",
    "#             cmap = 'coolwarm',\n",
    "#             square = True,\n",
    "#             annot = True,\n",
    "#             linewidths = 0.1,\n",
    "#             linecolor = 'black')\n",
    "\n",
    "\n",
    "# # setting more plot options\n",
    "# plt.yticks([0, 1, 2, 3, 4, 5],\n",
    "#            [\"PC 1\", \"PC 2\", \"PC 3\", \"PC 4\", \"PC 5\", \"PC 6\"])\n",
    "\n",
    "# # plt.yticks(range(0, 6),\n",
    "# #            psycometric_behavior.columns,\n",
    "# #            rotation=60,\n",
    "# #            ha='left')\n",
    "\n",
    "# # plt.ylabel(xlabel = \"Feature\")\n",
    "# # plt.xlabel(ylabel = \"Principal Component\")\n",
    "\n",
    "\n",
    "# # displaying the plot\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cbf19f8",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>a) Analyze the PC factor loadings.</h4>\n",
    "Analysing the factor loadings and developing a persona for each principal component. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "54340b24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transposing pca components\n",
    "factor_loadings_df = pd.DataFrame(np.transpose(pca.components_.round(decimals = 2)))\n",
    "\n",
    "\n",
    "# naming rows as original features\n",
    "factor_loadings_df = factor_loadings_df.set_index(pyscometric_scaled.columns)\n",
    "\n",
    "\n",
    "# checking the result\n",
    "#print(factor_loadings_df)\n",
    "\n",
    "\n",
    "# saving to Excel\n",
    "#factor_loadings_df.to_excel('mobile_survey_v2_24_26.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9c9dfd39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transposing pca components\n",
    "factor_loadings_df_2 = pd.DataFrame(np.transpose(pca_2.components_.round(decimals = 2)))\n",
    "\n",
    "\n",
    "# naming rows as original features\n",
    "factor_loadings_df_2 = factor_loadings_df_2.set_index(pyscometric_scaled_2.columns)\n",
    "\n",
    "\n",
    "# checking the result\n",
    "#print(factor_loadings_df)\n",
    "\n",
    "\n",
    "# saving to Excel\n",
    "#factor_loadings_df_2.to_excel('mobile_survey_v2_2_25.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e33132d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "5 Components Factor Loadings Q24 and Q26\n",
      "------------------------------\n",
      "       0     1     2     3     4\n",
      "0   0.06 -0.34 -0.18  0.08 -0.00\n",
      "1   0.11 -0.50 -0.11  0.08 -0.10\n",
      "2  -0.02  0.01 -0.27  0.07  0.26\n",
      "3   0.16 -0.49 -0.05 -0.00 -0.10\n",
      "4  -0.01  0.16 -0.34  0.44 -0.03\n",
      "5  -0.16  0.01  0.42  0.29 -0.13\n",
      "6  -0.14 -0.02  0.24 -0.20  0.27\n",
      "7  -0.08 -0.06 -0.10 -0.32  0.24\n",
      "8  -0.08  0.15  0.01 -0.09  0.00\n",
      "9  -0.13 -0.00  0.40  0.34 -0.15\n",
      "10 -0.11  0.25 -0.23 -0.21 -0.10\n",
      "11 -0.10  0.13 -0.04  0.19  0.28\n",
      "12 -0.15  0.26 -0.28 -0.04 -0.06\n",
      "13  0.06  0.06  0.02 -0.29 -0.31\n",
      "14 -0.10  0.21 -0.13  0.06 -0.47\n",
      "15 -0.03  0.02  0.11 -0.23 -0.18\n",
      "16 -0.11  0.13  0.30 -0.06  0.04\n",
      "17 -0.12  0.01  0.17  0.21  0.35\n",
      "18 -0.09  0.02  0.17 -0.29 -0.04\n",
      "19 -0.14  0.06 -0.15  0.02  0.33\n",
      "20  0.33  0.10  0.06  0.01  0.08\n",
      "21  0.29  0.09  0.03 -0.11  0.17\n",
      "22  0.31  0.07  0.09  0.05  0.07\n",
      "23  0.32  0.12  0.02  0.02  0.01\n",
      "24  0.32  0.17  0.03  0.07  0.04\n",
      "25  0.32  0.18  0.01  0.04 -0.06\n",
      "26  0.32  0.17  0.04  0.17 -0.03\n",
      "27  0.28  0.01  0.15 -0.20  0.12\n",
      "5 Components Factor Loadings Q25\n",
      "------------------------------\n",
      "       0     1     2     3     4\n",
      "0   0.27 -0.25 -0.16 -0.22  0.37\n",
      "1   0.18 -0.32  0.29 -0.23 -0.38\n",
      "2   0.19 -0.02  0.40 -0.06  0.49\n",
      "3   0.30 -0.02 -0.36 -0.26  0.29\n",
      "4   0.18 -0.37  0.02  0.36 -0.03\n",
      "5  -0.56 -0.12  0.12  0.15  0.12\n",
      "6   0.11 -0.31 -0.36  0.37 -0.39\n",
      "7   0.19  0.22  0.54 -0.07 -0.27\n",
      "8   0.16  0.53  0.07  0.42  0.05\n",
      "9   0.16  0.48 -0.35  0.05 -0.07\n",
      "10 -0.24  0.17 -0.16 -0.59 -0.31\n",
      "11 -0.52 -0.02 -0.06  0.07  0.23\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "##################\n",
    "### 3 PC Model ###\n",
    "##################\n",
    "# transposing pca components (pc = 3)\n",
    "factor_loadings = pd.DataFrame(np.transpose(pca.components_))\n",
    "\n",
    "\n",
    "# naming rows as original features\n",
    "factor_loadings = factor_loadings.set_index(pyscometric_scaled.columns)\n",
    "\n",
    "# transposing pca components (pc = 3)\n",
    "factor_loadings_2 = pd.DataFrame(np.transpose(pca_2.components_))\n",
    "\n",
    "# naming rows as original features\n",
    "factor_loadings_2 = factor_loadings_2.set_index(pyscometric_scaled_2.columns)\n",
    "\n",
    "\n",
    "# checking the results\n",
    "print(f\"\"\"\n",
    "\n",
    "5 Components Factor Loadings Q24 and Q26\n",
    "------------------------------\n",
    "{factor_loadings.round(2)}\n",
    "5 Components Factor Loadings Q25\n",
    "------------------------------\n",
    "{factor_loadings_2.round(2)}\n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee7bdea1",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4> The survey is about mobile apps and what the respondents prefer and what they do not prefer. For the clusters in question number 25, the strongest correlation of the sub-questions defined the names chosen.</h4>\n",
    "\n",
    "* The Opinion Leader name was chosen because the strongest correlation was amongst the people that would prefer that other people said them what to do but at the same time considered themselves the opinion leaders or had strong opinion ideas. \n",
    "* Risk takers are the ones that are usually the first ones to try a product and are very creative. \n",
    "* Leaders like being in control and taking the lead in decision making. \n",
    "* The Optimistic are the ones that are active and always ready to go, are very creative, and that is why that’s why that name was chosen. \n",
    "* The Helper like to be helpful to others who are not as knowledgeable as they are when it comes to mobile apps.\n",
    "* Influencer segment likes to try things first, and it is well informed, having strong leadership skills. This segment enjoys being in control of how it uses and shows technology. \n",
    "* Time managers research all the new technology there is, so they know what they are buying. They do this to save time later, trying to figure things out later. \n",
    "* Efficient segment has a strong correlation among the statements that refer to using mobile apps that help to be more efficient and having more control over their lives. \n",
    "* Time savers segment is most mobile apps heavy users and nowadays. Those apps help people with lists of things they need to do, how much time they want to dedicate to each task. For example, now there is a new feature/app in which users can limit their time on any app of their choosing. \n",
    "* Apprentice segment likes to use mobile apps that allow users to keep learning about tv-shows that they are not watching. This segment uses technology to learn about different topics, gaining more control over its life. \n",
    "* Stylish cluster likes to look cool, buy designer brands, and follow the current trends. This segment likes using mobile apps more for their appearance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0e0834e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# naming each principal component\n",
    "factor_loadings.columns = ['Influencer',   \n",
    "                           'Time_manager',       \n",
    "                           'Efficient', \n",
    "                            'Apprentice ',\n",
    "                            'Stylish']  \n",
    "columns_1 = factor_loadings.columns\n",
    "\n",
    "factor_loadings_2.columns = ['Opinion_leader',   \n",
    "                           'Risk_taker',       \n",
    "                           'Leader', \n",
    "                            'Optimistic ',\n",
    "                            'Helper']\n",
    "columns_2 = factor_loadings_2.columns\n",
    "# checking the result\n",
    "# factor_loadings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7b8dc2da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#factor_loadings_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8624e25",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4> Analyzing factor strengths per customer and converting to a dataframe. Renaming columns after converting to a dataframe and then checking the results</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2a28d611",
   "metadata": {},
   "outputs": [],
   "source": [
    "# analyzing factor strengths per customer\n",
    "factor_loadings = pca.transform(pyscometric_scaled)\n",
    "\n",
    "\n",
    "# converting to a DataFrame\n",
    "factor_loadings_df = pd.DataFrame(factor_loadings)\n",
    "\n",
    "\n",
    "# renaming columns\n",
    "factor_loadings_df.columns = columns_1\n",
    "\n",
    "\n",
    "# checking the results\n",
    "# factor_loadings_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40132897",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c92ed020",
   "metadata": {},
   "outputs": [],
   "source": [
    "# analyzing factor strengths per customer\n",
    "factor_loadings_2 = pca_2.transform(pyscometric_scaled_2)\n",
    "\n",
    "\n",
    "# converting to a DataFrame\n",
    "factor_loadings_df_2 = pd.DataFrame(factor_loadings_2)\n",
    "\n",
    "\n",
    "# renaming columns\n",
    "factor_loadings_df_2.columns = columns_2\n",
    "\n",
    "\n",
    "# checking the results\n",
    "# factor_loadings_df_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4941eb61",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part IV: Agglomerative Clustering</h2><br>\n",
    "\n",
    "Developing a dendrogram to understand how many clusters to build using k-Means. Primary adavantage of generating a dendrogram is to better understand data groupings and help determine the final number of clusters to develop.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "80deb7d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from  scipy.cluster.hierarchy import dendrogram, linkage # dendrograms\n",
    "from  sklearn.cluster         import  KMeans # k-means clustering\n",
    "\n",
    "factors_combined = pd.concat([factor_loadings_df,\n",
    "                          factor_loadings_df_2],\n",
    "                          axis = 1)\n",
    "\n",
    "# applying the unsupervised_scaler function\n",
    "pca_scaled = unsupervised_scaler(factors_combined)\n",
    "\n",
    "\n",
    "# grouping data based on Ward distance\n",
    "standard_mergings_ward = linkage(y = pca_scaled,\n",
    "                                 method = 'ward',\n",
    "                                 optimal_ordering = True)\n",
    "\n",
    "\n",
    "# setting plot size\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# developing a dendrogram\n",
    "dendrogram(Z = standard_mergings_ward,\n",
    "           leaf_rotation = 90,\n",
    "           leaf_font_size = 6)\n",
    "\n",
    "\n",
    "# rendering the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a33ee801",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>a) Developing a k-Means model with five clusters.</h4><br>\n",
    "    \n",
    "After analyzing the distance between the different levels, and also thinking about our resources as a business, the conclusion was to work with the first five clusters and after that we, as a company, dominate every single cluster, increase one more cluster. However, at the beggining of the project as the department of analytics, we decided to work with only first clusters that are going to spearhead our marketing and finance strategy. \n",
    "</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "660bbfef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3    437\n",
      "2    321\n",
      "1    312\n",
      "0    241\n",
      "4    241\n",
      "Name: Cluster, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a k-Means object with five clusters\n",
    "customers_k_pca = KMeans(n_clusters   = 5,\n",
    "                        random_state = 219)\n",
    "\n",
    "\n",
    "# fitting the object to the data\n",
    "customers_k_pca.fit(pca_scaled)\n",
    "\n",
    "\n",
    "# converting the clusters to a DataFrame\n",
    "customers_kmeans_pca = pd.DataFrame({'Cluster': customers_k_pca.labels_})\n",
    "\n",
    "\n",
    "# checking the results\n",
    "print(customers_kmeans_pca.iloc[: , 0].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4df3f429",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>Displaying the centroids (mean values) for each cluster.</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "0839b22c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Influencer</th>\n",
       "      <th>Time_manager</th>\n",
       "      <th>Efficient</th>\n",
       "      <th>Apprentice</th>\n",
       "      <th>Stylish</th>\n",
       "      <th>Opinion_leader</th>\n",
       "      <th>Risk_taker</th>\n",
       "      <th>Leader</th>\n",
       "      <th>Optimistic</th>\n",
       "      <th>Helper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.14</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.23</td>\n",
       "      <td>-0.57</td>\n",
       "      <td>0.31</td>\n",
       "      <td>-0.63</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>1.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.08</td>\n",
       "      <td>-0.02</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>0.25</td>\n",
       "      <td>-0.10</td>\n",
       "      <td>-0.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.17</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>-0.72</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.42</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.61</td>\n",
       "      <td>-0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.46</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.31</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.83</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.04</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>-0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.50</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.58</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Influencer  Time_manager  Efficient  Apprentice  Stylish  Opinion_leader  Risk_taker  Leader  Optimistic  Helper\n",
       "0       -0.14          0.04       0.10        0.23    -0.57            0.31       -0.63   -0.60       -0.46    1.09\n",
       "1       -1.08         -0.02      -0.22        0.32     0.23            0.92       -0.46    0.25       -0.10   -0.55\n",
       "2        0.17          0.80      -0.46       -0.72    -0.22           -0.42       -0.08    0.06        0.61   -0.13\n",
       "3        0.46         -0.81       0.36       -0.31    -0.06           -0.83        0.21    0.04       -0.29   -0.16\n",
       "4        0.50          0.38       0.16        0.88     0.68            0.58        0.94    0.14        0.30    0.09"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# storing cluster centers\n",
    "centroids_pca = customers_k_pca.cluster_centers_\n",
    "\n",
    "\n",
    "# converting cluster centers into a DataFrame\n",
    "centroids_pca_df = pd.DataFrame(centroids_pca)\n",
    "\n",
    "\n",
    "# renaming principal components\n",
    "centroids_pca_df.columns = ['Influencer', \n",
    "                            'Time_manager' ,\n",
    "                            'Efficient',\n",
    "                            'Apprentice',\n",
    "                            'Stylish',\n",
    "                            'Opinion_leader',\n",
    "                            'Risk_taker',\n",
    "                            'Leader',\n",
    "                            'Optimistic',\n",
    "                             'Helper']\n",
    "\n",
    "\n",
    "# checking results (clusters = rows, pc = columns)\n",
    "centroids_pca_df.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a7fd003",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>c) Concatenating the PCA components into one DataFrame.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f4f39f31",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CaseID</th>\n",
       "      <th>Age</th>\n",
       "      <th>dev_Iphone</th>\n",
       "      <th>dev_ipod</th>\n",
       "      <th>dev_Android</th>\n",
       "      <th>dev_BB</th>\n",
       "      <th>dev_Nokia</th>\n",
       "      <th>dev_windows</th>\n",
       "      <th>dev_hp</th>\n",
       "      <th>dev_tablet</th>\n",
       "      <th>dev_other</th>\n",
       "      <th>dev_none</th>\n",
       "      <th>app_music</th>\n",
       "      <th>app_tv_check</th>\n",
       "      <th>app_ent</th>\n",
       "      <th>app_tv_show</th>\n",
       "      <th>app_gam</th>\n",
       "      <th>app_soc</th>\n",
       "      <th>app_news</th>\n",
       "      <th>app_shop</th>\n",
       "      <th>app_spec_news</th>\n",
       "      <th>app_oth</th>\n",
       "      <th>app_none</th>\n",
       "      <th>qty_app</th>\n",
       "      <th>qty_free_dld</th>\n",
       "      <th>visit_fb</th>\n",
       "      <th>visit_twitter</th>\n",
       "      <th>visit_myspace</th>\n",
       "      <th>visit_pandora</th>\n",
       "      <th>visit_vevo</th>\n",
       "      <th>visit_youtube</th>\n",
       "      <th>visit_AOL</th>\n",
       "      <th>visit_lastfm</th>\n",
       "      <th>visit_yahoo</th>\n",
       "      <th>visit_imbd</th>\n",
       "      <th>visit_linkedin</th>\n",
       "      <th>visit_netflix</th>\n",
       "      <th>education</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>no_child</th>\n",
       "      <th>childu6</th>\n",
       "      <th>child6_12</th>\n",
       "      <th>child13_17</th>\n",
       "      <th>child18more</th>\n",
       "      <th>race</th>\n",
       "      <th>hispanic</th>\n",
       "      <th>salary</th>\n",
       "      <th>sex</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>Influencer</th>\n",
       "      <th>Time_manager</th>\n",
       "      <th>Efficient</th>\n",
       "      <th>Apprentice</th>\n",
       "      <th>Stylish</th>\n",
       "      <th>Opinion_leader</th>\n",
       "      <th>Risk_taker</th>\n",
       "      <th>Leader</th>\n",
       "      <th>Optimistic</th>\n",
       "      <th>Helper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.58</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>1.48</td>\n",
       "      <td>-1.60</td>\n",
       "      <td>-1.38</td>\n",
       "      <td>-1.59</td>\n",
       "      <td>-0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>2.62</td>\n",
       "      <td>0.01</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.74</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.71</td>\n",
       "      <td>-0.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-3.18</td>\n",
       "      <td>1.03</td>\n",
       "      <td>0.19</td>\n",
       "      <td>2.80</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>0.34</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>2.28</td>\n",
       "      <td>0.54</td>\n",
       "      <td>-1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>-1.33</td>\n",
       "      <td>1.45</td>\n",
       "      <td>1.29</td>\n",
       "      <td>2.57</td>\n",
       "      <td>-2.07</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.86</td>\n",
       "      <td>-0.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.54</td>\n",
       "      <td>-0.59</td>\n",
       "      <td>-1.19</td>\n",
       "      <td>-1.54</td>\n",
       "      <td>1.52</td>\n",
       "      <td>-2.11</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.52</td>\n",
       "      <td>3.11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CaseID  Age  dev_Iphone  dev_ipod  dev_Android  dev_BB  dev_Nokia  dev_windows  dev_hp  dev_tablet  dev_other  dev_none  app_music  app_tv_check  app_ent  app_tv_show  app_gam  app_soc  app_news  app_shop  app_spec_news  app_oth  app_none  qty_app  qty_free_dld  visit_fb   visit_twitter  visit_myspace  visit_pandora  visit_vevo  visit_youtube  visit_AOL  visit_lastfm  visit_yahoo  visit_imbd  visit_linkedin  visit_netflix  education  marital_status  no_child  childu6  child6_12  child13_17  child18more  race  hispanic  salary  sex  Cluster  Influencer  Time_manager  Efficient  Apprentice  Stylish  Opinion_leader  Risk_taker  Leader  Optimistic  Helper\n",
       "0       1   10           0         0            1       0          0            0       0           0          0         0          0             0        0            0        0        1         0         0              0        0         0        1             1          1              4              4              4           4              4          4             4            4           4               4              4          3               4         1        0          0           0            0     2         2       5    1        0       -2.58         -0.99      -0.46        0.92    -0.97            1.48       -1.60   -1.38       -1.59   -0.16\n",
       "1       2    5           0         0            1       0          0            0       0           0          0         0          0             1        1            1        0        0         0         0              1        0         0        3             3          1              2              2              1           2              2          2             2            2           2               2              2          5               1         0        1          1           0            0     3         2      10    2        4       -0.58          2.62       0.01       -0.64     2.82            2.09        1.74    0.56        0.71   -0.81\n",
       "2       3    7           0         0            0       0          1            0       0           0          0         0          0             0        0            0        1        1         0         0              0        0         0        1             5          1              3              4              2           4              2          4             4            2           4               4              3          4               4         0        0          0           1            0     2         2       6    1        1       -3.18          1.03       0.19        2.80    -0.62            0.34       -1.43    2.28        0.54   -1.69\n",
       "3       4    7           1         1            0       0          0            0       0           0          0         0          0             0        1            1        0        1         0         0              0        0         0        2             2          1              4              4              4           4              2          4             4            2           4               4              4          2               1         0        1          1           0            0     1         2       5    1        4       -1.33          1.45       1.29        2.57    -2.07            2.11        0.24   -0.30        0.86   -0.20\n",
       "4       6    2           1         0            0       0          0            0       0           0          0         0          1             0        0            0        0        0         0         0              0        0         0        2             3          1              2              3              3           3              2          2             2            4           1               2              2          5               2         1        0          0           0            0     3         2       4    2        0       -0.01          0.54      -0.59       -1.19    -1.54            1.52       -2.11    0.92        0.52    3.11"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concatinating cluster memberships with principal components\n",
    "clst_pca_df = pd.concat([customers_kmeans_pca,\n",
    "                          factors_combined],\n",
    "                          axis = 1)\n",
    "\n",
    "\n",
    "# concatenating demographic information with pca-clusters\n",
    "final_pca_clust_df = pd.concat([survey.loc[ : , ['caseID', 'q1', 'q2r1', 'q2r2', 'q2r3', 'q2r4', 'q2r5', \n",
    "                                                 'q2r6', 'q2r7', 'q2r8', 'q2r9', 'q2r10', 'q4r1', 'q4r2', 'q4r3', \n",
    "                                                 'q4r4', 'q4r5', 'q4r6', 'q4r7', 'q4r8', 'q4r9', 'q4r10', 'q4r11', \n",
    "                                                 'q11', 'q12', 'q13r1', 'q13r2', 'q13r3', 'q13r4', 'q13r5', 'q13r6',\n",
    "                                                 'q13r7', 'q13r8', 'q13r9', 'q13r10', 'q13r11', 'q13r12', \n",
    "                                                 'q48', 'q49', 'q50r1', 'q50r2', 'q50r3', 'q50r4', 'q50r5', 'q54', 'q55', \n",
    "                                                 'q56', 'q57']],\n",
    "                                  clst_pca_df.round(decimals = 2)],\n",
    "                                  axis = 1)\n",
    "\n",
    "\n",
    "# renaming columns\n",
    "final_pca_clust_df.columns = ['CaseID','Age',\n",
    "'dev_Iphone',\n",
    "'dev_ipod',\n",
    "'dev_Android',\n",
    "'dev_BB',\n",
    "'dev_Nokia',\n",
    "'dev_windows',\n",
    "'dev_hp',\n",
    "'dev_tablet',\n",
    "'dev_other',\n",
    "'dev_none',\n",
    "'app_music',\n",
    "'app_tv_check',\n",
    "'app_ent',\n",
    "'app_tv_show',\n",
    "'app_gam',\n",
    "'app_soc',\n",
    "'app_news',\n",
    "'app_shop',\n",
    "'app_spec_news',\n",
    "'app_oth',\n",
    "'app_none',\n",
    "'qty_app',\n",
    "'qty_free_dld',\n",
    "'visit_fb ',\n",
    "'visit_twitter',\n",
    "'visit_myspace',\n",
    "'visit_pandora',\n",
    "'visit_vevo',\n",
    "'visit_youtube',\n",
    "'visit_AOL',\n",
    "'visit_lastfm',\n",
    "'visit_yahoo',\n",
    "'visit_imbd',\n",
    "'visit_linkedin',\n",
    "'visit_netflix',\n",
    "'education',\n",
    "'marital_status',\n",
    "'no_child',\n",
    "'childu6',\n",
    "'child6_12',\n",
    "'child13_17',\n",
    "'child18more',\n",
    "'race',\n",
    "'hispanic',\n",
    "'salary',\n",
    " 'sex', \n",
    "'Cluster',\n",
    "'Influencer', \n",
    "                            'Time_manager' ,\n",
    "                            'Efficient',\n",
    "                            'Apprentice',\n",
    "                            'Stylish',\n",
    "                            'Opinion_leader',\n",
    "                            'Risk_taker',\n",
    "                            'Leader',\n",
    "                            'Optimistic',\n",
    "                             'Helper']\n",
    "\n",
    "\n",
    "# checking the results\n",
    "final_pca_clust_df.head(n = 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31d028dc",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>c) Renaming clusters, age, qtyapps, maritalstatus, the PCA components into one DataFrame.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1ed598e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CaseID</th>\n",
       "      <th>Age</th>\n",
       "      <th>dev_Iphone</th>\n",
       "      <th>dev_ipod</th>\n",
       "      <th>dev_Android</th>\n",
       "      <th>dev_BB</th>\n",
       "      <th>dev_Nokia</th>\n",
       "      <th>dev_windows</th>\n",
       "      <th>dev_hp</th>\n",
       "      <th>dev_tablet</th>\n",
       "      <th>dev_other</th>\n",
       "      <th>dev_none</th>\n",
       "      <th>app_music</th>\n",
       "      <th>app_tv_check</th>\n",
       "      <th>app_ent</th>\n",
       "      <th>app_tv_show</th>\n",
       "      <th>app_gam</th>\n",
       "      <th>app_soc</th>\n",
       "      <th>app_news</th>\n",
       "      <th>app_shop</th>\n",
       "      <th>app_spec_news</th>\n",
       "      <th>app_oth</th>\n",
       "      <th>app_none</th>\n",
       "      <th>qty_app</th>\n",
       "      <th>qty_free_dld</th>\n",
       "      <th>visit_fb</th>\n",
       "      <th>visit_twitter</th>\n",
       "      <th>visit_myspace</th>\n",
       "      <th>visit_pandora</th>\n",
       "      <th>visit_vevo</th>\n",
       "      <th>visit_youtube</th>\n",
       "      <th>visit_AOL</th>\n",
       "      <th>visit_lastfm</th>\n",
       "      <th>visit_yahoo</th>\n",
       "      <th>visit_imbd</th>\n",
       "      <th>visit_linkedin</th>\n",
       "      <th>visit_netflix</th>\n",
       "      <th>education</th>\n",
       "      <th>marital_status</th>\n",
       "      <th>no_child</th>\n",
       "      <th>childu6</th>\n",
       "      <th>child6_12</th>\n",
       "      <th>child13_17</th>\n",
       "      <th>child18more</th>\n",
       "      <th>race</th>\n",
       "      <th>hispanic</th>\n",
       "      <th>salary</th>\n",
       "      <th>sex</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>Influencer</th>\n",
       "      <th>Time_manager</th>\n",
       "      <th>Efficient</th>\n",
       "      <th>Apprentice</th>\n",
       "      <th>Stylish</th>\n",
       "      <th>Opinion_leader</th>\n",
       "      <th>Risk_taker</th>\n",
       "      <th>Leader</th>\n",
       "      <th>Optimistic</th>\n",
       "      <th>Helper</th>\n",
       "      <th>age_group</th>\n",
       "      <th>salary_group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60-64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>separated</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>black</td>\n",
       "      <td>No</td>\n",
       "      <td>$30k-$39,9K</td>\n",
       "      <td>Male</td>\n",
       "      <td>Cluster 1</td>\n",
       "      <td>-2.58</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>-0.46</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>1.48</td>\n",
       "      <td>-1.60</td>\n",
       "      <td>-1.38</td>\n",
       "      <td>-1.59</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>60+</td>\n",
       "      <td>$30k-$69,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>35-39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11-30</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>asian</td>\n",
       "      <td>No</td>\n",
       "      <td>$80k-$89,9K</td>\n",
       "      <td>Female</td>\n",
       "      <td>Cluster 5</td>\n",
       "      <td>-0.58</td>\n",
       "      <td>2.62</td>\n",
       "      <td>0.01</td>\n",
       "      <td>-0.64</td>\n",
       "      <td>2.82</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.74</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.71</td>\n",
       "      <td>-0.81</td>\n",
       "      <td>30-39</td>\n",
       "      <td>$70k-$99,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>45-49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1-5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>separated</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>black</td>\n",
       "      <td>No</td>\n",
       "      <td>$40k-$49,9K</td>\n",
       "      <td>Male</td>\n",
       "      <td>Cluster 2</td>\n",
       "      <td>-3.18</td>\n",
       "      <td>1.03</td>\n",
       "      <td>0.19</td>\n",
       "      <td>2.80</td>\n",
       "      <td>-0.62</td>\n",
       "      <td>0.34</td>\n",
       "      <td>-1.43</td>\n",
       "      <td>2.28</td>\n",
       "      <td>0.54</td>\n",
       "      <td>-1.69</td>\n",
       "      <td>40-49</td>\n",
       "      <td>$30k-$69,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>45-49</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6-10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>Married</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>white</td>\n",
       "      <td>No</td>\n",
       "      <td>$30k-$39,9K</td>\n",
       "      <td>Male</td>\n",
       "      <td>Cluster 5</td>\n",
       "      <td>-1.33</td>\n",
       "      <td>1.45</td>\n",
       "      <td>1.29</td>\n",
       "      <td>2.57</td>\n",
       "      <td>-2.07</td>\n",
       "      <td>2.11</td>\n",
       "      <td>0.24</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.86</td>\n",
       "      <td>-0.20</td>\n",
       "      <td>40-49</td>\n",
       "      <td>$30k-$69,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>18-24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6-10</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>asian</td>\n",
       "      <td>No</td>\n",
       "      <td>$20k-$29,9K</td>\n",
       "      <td>Female</td>\n",
       "      <td>Cluster 1</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>0.54</td>\n",
       "      <td>-0.59</td>\n",
       "      <td>-1.19</td>\n",
       "      <td>-1.54</td>\n",
       "      <td>1.52</td>\n",
       "      <td>-2.11</td>\n",
       "      <td>0.92</td>\n",
       "      <td>0.52</td>\n",
       "      <td>3.11</td>\n",
       "      <td>18-29</td>\n",
       "      <td>$0-$29.9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1547</th>\n",
       "      <td>2392</td>\n",
       "      <td>18-24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11-30</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>OR</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Under $10K</td>\n",
       "      <td>Male</td>\n",
       "      <td>Cluster 3</td>\n",
       "      <td>5.07</td>\n",
       "      <td>1.54</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.17</td>\n",
       "      <td>-1.24</td>\n",
       "      <td>-1.25</td>\n",
       "      <td>-0.95</td>\n",
       "      <td>-0.86</td>\n",
       "      <td>1.65</td>\n",
       "      <td>-0.63</td>\n",
       "      <td>18-29</td>\n",
       "      <td>0-29.9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1548</th>\n",
       "      <td>2393</td>\n",
       "      <td>30-34</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>31+</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>white</td>\n",
       "      <td>No</td>\n",
       "      <td>$70k-$79,9K</td>\n",
       "      <td>Female</td>\n",
       "      <td>Cluster 4</td>\n",
       "      <td>3.69</td>\n",
       "      <td>-2.03</td>\n",
       "      <td>-0.92</td>\n",
       "      <td>0.77</td>\n",
       "      <td>0.86</td>\n",
       "      <td>-0.96</td>\n",
       "      <td>1.40</td>\n",
       "      <td>-1.80</td>\n",
       "      <td>0.75</td>\n",
       "      <td>-0.35</td>\n",
       "      <td>30-39</td>\n",
       "      <td>$70k-$99,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1549</th>\n",
       "      <td>2394</td>\n",
       "      <td>25-29</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11-30</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Single</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>white</td>\n",
       "      <td>No</td>\n",
       "      <td>$100k-$124,9K</td>\n",
       "      <td>Female</td>\n",
       "      <td>Cluster 5</td>\n",
       "      <td>-1.23</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.61</td>\n",
       "      <td>-0.15</td>\n",
       "      <td>1.40</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.30</td>\n",
       "      <td>-0.60</td>\n",
       "      <td>-0.38</td>\n",
       "      <td>-2.48</td>\n",
       "      <td>18-29</td>\n",
       "      <td>$100k and $149,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1550</th>\n",
       "      <td>2395</td>\n",
       "      <td>18-24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11-30</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Single</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>OR</td>\n",
       "      <td>Yes</td>\n",
       "      <td>$50k-$59,9K</td>\n",
       "      <td>Male</td>\n",
       "      <td>Cluster 4</td>\n",
       "      <td>1.02</td>\n",
       "      <td>-1.93</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>-1.67</td>\n",
       "      <td>1.79</td>\n",
       "      <td>-1.17</td>\n",
       "      <td>-1.46</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>18-29</td>\n",
       "      <td>$30k-$69,9K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1551</th>\n",
       "      <td>2396</td>\n",
       "      <td>18-24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6-10</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>Single</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>white</td>\n",
       "      <td>No</td>\n",
       "      <td>$40k-$49,9K</td>\n",
       "      <td>Male</td>\n",
       "      <td>Cluster 1</td>\n",
       "      <td>-0.36</td>\n",
       "      <td>-0.87</td>\n",
       "      <td>0.56</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-2.35</td>\n",
       "      <td>1.31</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.13</td>\n",
       "      <td>-0.23</td>\n",
       "      <td>1.97</td>\n",
       "      <td>18-29</td>\n",
       "      <td>$30k-$69,9K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1552 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      CaseID    Age  dev_Iphone  dev_ipod  dev_Android  dev_BB  dev_Nokia  dev_windows  dev_hp  dev_tablet  dev_other  dev_none  app_music  app_tv_check  app_ent  app_tv_show  app_gam  app_soc  app_news  app_shop  app_spec_news  app_oth  app_none qty_app  qty_free_dld  visit_fb   visit_twitter  visit_myspace  visit_pandora  visit_vevo  visit_youtube  visit_AOL  visit_lastfm  visit_yahoo  visit_imbd  visit_linkedin  visit_netflix  education marital_status  no_child  childu6  child6_12  child13_17  child18more   race hispanic         salary     sex    Cluster  Influencer  Time_manager  Efficient  Apprentice  Stylish  Opinion_leader  Risk_taker  Leader  Optimistic  Helper age_group       salary_group\n",
       "0          1  60-64           0         0            1       0          0            0       0           0          0         0          0             0        0            0        0        1         0         0              0        0         0     1-5             1          1              4              4              4           4              4          4             4            4           4               4              4          3      separated         1        0          0           0            0  black       No    $30k-$39,9K    Male  Cluster 1       -2.58         -0.99      -0.46        0.92    -0.97            1.48       -1.60   -1.38       -1.59   -0.16       60+        $30k-$69,9K\n",
       "1          2  35-39           0         0            1       0          0            0       0           0          0         0          0             1        1            1        0        0         0         0              1        0         0   11-30             3          1              2              2              1           2              2          2             2            2           2               2              2          5        Married         0        1          1           0            0  asian       No    $80k-$89,9K  Female  Cluster 5       -0.58          2.62       0.01       -0.64     2.82            2.09        1.74    0.56        0.71   -0.81     30-39        $70k-$99,9K\n",
       "2          3  45-49           0         0            0       0          1            0       0           0          0         0          0             0        0            0        1        1         0         0              0        0         0     1-5             5          1              3              4              2           4              2          4             4            2           4               4              3          4      separated         0        0          0           1            0  black       No    $40k-$49,9K    Male  Cluster 2       -3.18          1.03       0.19        2.80    -0.62            0.34       -1.43    2.28        0.54   -1.69     40-49        $30k-$69,9K\n",
       "3          4  45-49           1         1            0       0          0            0       0           0          0         0          0             0        1            1        0        1         0         0              0        0         0    6-10             2          1              4              4              4           4              2          4             4            2           4               4              4          2        Married         0        1          1           0            0  white       No    $30k-$39,9K    Male  Cluster 5       -1.33          1.45       1.29        2.57    -2.07            2.11        0.24   -0.30        0.86   -0.20     40-49        $30k-$69,9K\n",
       "4          6  18-24           1         0            0       0          0            0       0           0          0         0          1             0        0            0        0        0         0         0              0        0         0    6-10             3          1              2              3              3           3              2          2             2            4           1               2              2          5         Single         1        0          0           0            0  asian       No    $20k-$29,9K  Female  Cluster 1       -0.01          0.54      -0.59       -1.19    -1.54            1.52       -2.11    0.92        0.52    3.11     18-29          $0-$29.9K\n",
n",
       "1547    2392  18-24           1         1            0       0          0            0       0           0          0         0          1             1        1            0        1        1         1         1              0        0         0   11-30             4          2              2              3              2           1              1          4             4            2           4               4              1          2         Single         0        1          0           0            0     OR      Yes     Under $10K    Male  Cluster 3        5.07          1.54       0.15        0.17    -1.24           -1.25       -0.95   -0.86        1.65   -0.63     18-29            0-29.9K\n",
       "1548    2393  30-34           1         1            0       0          0            0       0           1          0         0          1             0        1            0        1        1         1         1              0        0         0     31+             3          1              4              4              4           4              2          4             4            4           1               4              2          3        Married         0        1          1           0            0  white       No    $70k-$79,9K  Female  Cluster 4        3.69         -2.03      -0.92        0.77     0.86           -0.96        1.40   -1.80        0.75   -0.35     30-39        $70k-$99,9K\n",
       "1549    2394  25-29           1         1            0       1          0            0       0           1          0         0          1             1        1            1        1        1         1         1              1        0         0   11-30             4          2              2              2              1           2              1          1             2            1           1               1              1          4         Single         0        0          1           1            0  white       No  $100k-$124,9K  Female  Cluster 5       -1.23          0.97       0.61       -0.15     1.40            0.03        2.30   -0.60       -0.38   -2.48     18-29  $100k and $149,9K\n",
       "1550    2395  18-24           1         0            1       0          0            0       0           0          0         0          1             0        1            0        1        1         1         1              1        0         0   11-30             4          1              4              4              1           2              1          4             4            3           2               4              1          2         Single         1        0          0           0            0     OR      Yes    $50k-$59,9K    Male  Cluster 4        1.02         -1.93       0.67        0.80    -0.16           -1.67        1.79   -1.17       -1.46   -0.99     18-29        $30k-$69,9K\n",
       "1551    2396  18-24           1         0            0       0          0            0       0           0          0         0          1             0        1            1        1        1         0         0              0        0         0    6-10             5          1              1              4              3           3              1          4             4            2           1               3              2          3         Single         1        0          0           0            0  white       No    $40k-$49,9K    Male  Cluster 1       -0.36         -0.87       0.56        0.00    -2.35            1.31       -0.22   -0.13       -0.23    1.97     18-29        $30k-$69,9K\n",
       "\n",
       "[1552 rows x 61 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# renaming clusters\n",
    "cluster_names = {0 : 'Cluster 1',\n",
    "                 1 : 'Cluster 2',\n",
    "                 2 : 'Cluster 3',\n",
    "                 3 : 'Cluster 4',\n",
    "                 4 : 'Cluster 5'}\n",
    "\n",
    "\n",
    "final_pca_clust_df['Cluster'].replace(cluster_names, inplace = True)\n",
    "\n",
    "final_pca_clust_df['age_group'] =  final_pca_clust_df['Age'] \n",
    "\n",
    "agegroup_names = {1: 'Under 18',\n",
    "                  2: '18-29',\n",
    "                  3: '18-29',\n",
    "                  4: '30-39',\n",
    "                  5: '30-39',\n",
    "                  6: '40-49',\n",
    "                  7: '40-49',\n",
    "                  8: '50-59',\n",
    "                  9: '50-59',\n",
    "                  10:'60+',\n",
    "                  11:'60+' }\n",
    "\n",
    "final_pca_clust_df['age_group'].replace(agegroup_names, inplace = True)\n",
    "\n",
    "age_names = {     1: 'Under 18',\n",
    "                  2: '18-24',\n",
    "                  3: '25-29',\n",
    "                  4: '30-34',\n",
    "                  5: '35-39',\n",
    "                  6: '40-44',\n",
    "                  7: '45-49',\n",
    "                  8: '50-54',\n",
    "                  9: '55-59',\n",
    "                  10:'60-64',\n",
    "                  11:'65+' }\n",
    "\n",
    "final_pca_clust_df['Age'].replace(age_names, inplace = True)\n",
    "\n",
    "qtyapp_names = {  1: '1-5',\n",
    "                  2: '6-10',\n",
    "                  3: '11-30',\n",
    "                  4: '31+',\n",
    "                  5: 'no know',\n",
    "                  6: 'None'}\n",
    "\n",
    "final_pca_clust_df['qty_app'].replace(qtyapp_names, inplace = True)\n",
    "\n",
    "marritalstatus_names = {  1: 'Married',\n",
    "                          2: 'Single',\n",
    "                          3: 'Sgl w Part',\n",
    "                          4: 'separated'}\n",
    "\n",
    "final_pca_clust_df['marital_status'].replace(marritalstatus_names, inplace = True)\n",
    "\n",
    "race_names = {            1: 'white',\n",
    "                          2: 'black',\n",
    "                          3: 'asian',\n",
    "                          4: 'NHOPI',\n",
    "                          5: 'AIAN',\n",
    "                          6: 'OR'}\n",
    "\n",
    "final_pca_clust_df['race'].replace(race_names, inplace = True)\n",
    "\n",
    "final_pca_clust_df['salary_group'] =  final_pca_clust_df['salary'] \n",
    "\n",
    "salarygroups_names = {1: '0-29.9K',\n",
    "                2: '$0-$29.9K',\n",
    "                3: '$0-$29.9K',\n",
    "                4: '$0-$29.9K',\n",
    "                5: '$30k-$69,9K',\n",
    "                6: '$30k-$69,9K',\n",
    "                7: '$30k-$69,9K',\n",
    "                8: '$30k-$69,9K',\n",
    "                9: '$70k-$99,9K',\n",
    "                10: '$70k-$99,9K',\n",
    "                11: '$70k-$99,9K',\n",
    "                12: '$100k and $149,9K',\n",
    "                13: '$100k and $149,9K',\n",
    "                14: '$150k and over'\n",
    "                }\n",
    "\n",
    "final_pca_clust_df['salary_group'].replace(salarygroups_names, inplace = True)\n",
    "\n",
    "salary_names = {1: 'Under $10K',\n",
    "                2: '$10k-$14,9K',\n",
    "                3: '$15k-$19,9K',\n",
    "                4: '$20k-$29,9K',\n",
    "                5: '$30k-$39,9K',\n",
    "                6: '$40k-$49,9K',\n",
    "                7: '$50k-$59,9K',\n",
    "                8: '$60k-$69,9K',\n",
    "                9: '$70k-$79,9K',\n",
    "                10: '$80k-$89,9K',\n",
    "                11: '$90k-$99,9K',\n",
    "                12: '$100k-$124,9K',\n",
    "                13: '$125k-$149,9K',\n",
    "                14: '$150k and over'\n",
    "                }\n",
    "\n",
    "\n",
    "final_pca_clust_df['salary'].replace(salary_names, inplace = True)\n",
    "\n",
    "sex_names = {            1: 'Male',\n",
    "                          2: 'Female'}\n",
    "\n",
    "final_pca_clust_df['sex'].replace(sex_names, inplace = True)\n",
    "\n",
    "hispanic_names = {            1: 'Yes',\n",
    "                          2: 'No'}\n",
    "\n",
    "final_pca_clust_df['hispanic'].replace(hispanic_names, inplace = True)\n",
    "\n",
    "# adding a productivity step\n",
    "data_df = final_pca_clust_df\n",
    "\n",
    "\n",
    "# checking results\n",
    "data_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47607b28",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>Part V: Analyzing PCAs by using histograms to demonstrate the variance of the standard deviation.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e4093edb",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "lst = ['Time_manager' , \n",
    "      'Efficient', \n",
    "        'Apprentice', \n",
    "        'Stylish', \n",
    "     'Opinion_leader', \n",
    "    'Risk_taker', \n",
    "   'Leader', \n",
    "  'Optimistic', \n",
    "  'Helper',\n",
    "      'Influencer']\n",
    "\n",
    "for i in lst:\n",
    "    \n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.histplot( x= i,  data =data_df)\n",
    "\n",
    "    plt.title(i + 'deviation')\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a701b06",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4> Analyzing the thresholds of every PCA and deciding which customer has the feature of every PCA and who is neutral, setting a threshold for every PCA. After analyzing the variance of every single PCA, it was decided to remove the stylish PCA because there is no significant difference.\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b841704",
   "metadata": {},
   "outputs": [],
   "source": [
    "for index, col in data_df.iterrows():\n",
    "    if data_df.loc[index, 'Time_manager'] >= 1.5:\n",
    "        data_df.loc[index, 'Time_manager_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Time_manager'] <= -1.35:\n",
    "        data_df.loc[index, 'Time_manager_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Time_manager_h'] = 'neutral'\n",
    "    \n",
    "    if data_df.loc[index, 'Efficient'] >= 1.5:\n",
    "        data_df.loc[index, 'Efficient_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Efficient'] <= -1.35:\n",
    "        data_df.loc[index, 'Efficient_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Efficient_h'] = 'neutral'    \n",
    "        \n",
    "    if data_df.loc[index, 'Apprentice'] >= 1:\n",
    "        data_df.loc[index, 'Apprentice_h'] =  'yes'\n",
    "    elif data_df.loc[index, 'Apprentice'] <= -1:\n",
    "        data_df.loc[index, 'Apprentice_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Apprentice_h'] = 'neutral'  \n",
    "        \n",
    "    if data_df.loc[index, 'Stylish'] >= 1:\n",
    "        data_df.loc[index, 'Stylish_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Stylish'] <= -1:\n",
    "        data_df.loc[index, 'Stylish_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Stylish_h'] = 'netrual'  \n",
    "        \n",
    "        \n",
    "    if data_df.loc[index, 'Opinion_leader'] >= 1:\n",
    "        data_df.loc[index, 'Opinion_leader_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Opinion_leader'] <= -1:\n",
    "        data_df.loc[index, 'Opinion_leader_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Opinion_leader_h'] = 'neutral' \n",
    "        \n",
    "    if data_df.loc[index, 'Risk_taker'] >= 1:\n",
    "        data_df.loc[index, 'Risk_taker_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Risk_taker'] <= -1:\n",
    "        data_df.loc[index, 'Risk_taker_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Risk_taker_h'] = 'neutral'  \n",
    "        \n",
    "    if data_df.loc[index, 'Leader'] >= 1:\n",
    "        data_df.loc[index, 'Leader_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Leader'] <= -1:\n",
    "        data_df.loc[index, 'Leader_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Leader_h'] = 'neutral' \n",
    "        \n",
    "    if data_df.loc[index, 'Optimistic'] >= 1:\n",
    "        data_df.loc[index, 'Optimistic_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Optimistic'] <= -1:\n",
    "        data_df.loc[index, 'Optimistic_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Optimistic_h'] = 'neutral' \n",
    "        \n",
    "    if data_df.loc[index, 'Helper'] >= 1:\n",
    "        data_df.loc[index, 'Helper_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Helper'] <= -1:\n",
    "        data_df.loc[index, 'Helper_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Helper_h'] = 'neutral'\n",
    "        \n",
    "    if data_df.loc[index, 'Influencer'] >= 2:\n",
    "        data_df.loc[index, 'Influencer_h'] = 'yes'\n",
    "    elif data_df.loc[index, 'Influencer'] <= -2:\n",
    "        data_df.loc[index, 'Influencer_h'] = 'no'\n",
    "    else:\n",
    "        data_df.loc[index, 'Influencer_h'] = 'neutral'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4783b53",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "<h4>Analyzing the plots for determining the composition of the clusters.</h4><br>\n",
    "    \n",
    "We decided to work primarily with clusters four and three because they have the most population of the survey. On the other hand, the principal findings are that cluster four has a lot of people that aren't time managers so we cannot target an app that helps those clusters to manage their time because they are not interested. Moreover, this segment is not opinion leaders, and it has more people who consider themselves as Efficient so as a company we can launch apps that help them to simplify their lives as productivity apps. \n",
    "\n",
    "On the other hand, cluster three, consider themselves as time managers, so take into consideration is possible to launch some apps that help them remind them to do tasks. They are more traditional because they don't like to learn about new apps. For this reason, we must be careful and take some model apps that they are used to it and take that customer experience as an example. Finally, they consider themselves optimistic, which means that they are active people."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "241a1883",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "lst = ['Time_manager_h' , \n",
    "      'Efficient_h', \n",
    "        'Apprentice_h', \n",
    "        'Stylish_h', \n",
    "     'Opinion_leader_h', \n",
    "    'Risk_taker_h', \n",
    "   'Leader_h', \n",
    "  'Optimistic_h', \n",
    "  'Helper_h',\n",
    "      'Influencer_h']\n",
    "\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.histplot( x=i, hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "    plt.title(i + ' Count')\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39d5f27f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#data_df.loc[:, ['age_group']][data_df.loc[:, 'Optimistic_h'] == 'yes'].value_counts(normalize=True)\n",
    "#data_df.loc[:, ['salary_group']][data_df.loc[:, 'Optimistic_h'] == 'yes'].value_counts(normalize=True)\n",
    "#qty_app\n",
    "#marital_status\n",
    "#hispanic\n",
    "#race\n",
    "#sex\n",
    "result = data_df.loc[:, ['qty_app']][data_df.loc[:, 'Opinion_leader_h'] == 'yes'] \\\n",
    "[data_df.loc[:, 'Cluster'].isin(['Cluster 3', 'Cluster 4']) ].value_counts(normalize=True).round(2)\n",
    "\n",
    "result_1 = pd.DataFrame(result)\n",
    "result_1.sort_values(by =['qty_app'])\n",
    "#result_1.loc[:,:][result_1.loc[:, 'Cluster'] == 'Cluster 1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88a89a1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#data_df.loc[:, ['age_group']][data_df.loc[:, 'Optimistic_h'] == 'yes'].value_counts(normalize=True)\n",
    "#data_df.loc[:, ['salary_group']][data_df.loc[:, 'Optimistic_h'] == 'yes'].value_counts(normalize=True)\n",
    "#qty_app\n",
    "#marital_status\n",
    "#hispanic\n",
    "#race\n",
    "#sex\n",
    "#data_df.loc[:, ['Cluster','qty_app']][data_df.loc[:, 'Opinion_leader_h'] == 'yes'].value_counts(normalize=True).sort_values(by = 'Cluster')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df99cb48",
   "metadata": {},
   "outputs": [],
   "source": [
    "help(data_df.loc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d97e2d82",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "########################\n",
    "# \n",
    "########################\n",
    "# lst = ['Time_manager' , \n",
    "#       'Efficient', \n",
    "#         'Apprentice', \n",
    "#         'Stylish', \n",
    "#      'Opinion_leader', \n",
    "#     'Risk_taker', \n",
    "#    'Leader', \n",
    "#   'Optimistic', \n",
    "#   'Helper',\n",
    "#       'Influencer']\n",
    "\n",
    "\n",
    "lst = ['Opinion_leader' , \n",
    "      'Risk_taker'] \n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'sex',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "\n",
    "    #plotting all the segments\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "sns.histplot( x=\"sex\", hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "plt.title('Sex Count')\n",
    "# formatting and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f25acfc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = ['Opinion_leader' , \n",
    "      'Apprentice']\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'salary_group',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "#plotting all the segments\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "sns.histplot( x=\"salary_group\", hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "plt.title('Sex Count')\n",
    "# formatting and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6713fc98",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = ['Opinion_leader' , \n",
    "      'Apprentice']\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'age_group',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "#plotting all the segments\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "sns.histplot( x=\"age_group\", hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "plt.title('Sex Count')\n",
    "# formatting and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df70e166",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "lst = ['Opinion_leader' ,\n",
    "      'Apprentice']\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'hispanic',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "#plotting all the segments\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "sns.histplot( x=\"hispanic\", hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "plt.title('Sex Count')\n",
    "# formatting and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c8fac11",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = ['Opinion_leader' ,\n",
    "      'Risk_taker']\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'marital_status',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "#plotting all the segments\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "sns.histplot( x=\"marital_status\", hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "plt.title('Sex Count')\n",
    "# formatting and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74489378",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = ['Opinion_leader' ,\n",
    "      'Apprentice']\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'qty_app',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "#plotting all the segments\n",
    "fig, ax = plt.subplots(figsize = (12, 8))\n",
    "sns.histplot( x=\"qty_app\", hue=\"Cluster\", multiple=\"dodge\", data =data_df,stat=\"density\", shrink=.8)\n",
    "\n",
    "plt.title('Sex Count')\n",
    "# formatting and displaying the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e58eb6b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "lst = ['Opinion_leader' ,\n",
    "      'Apprentice']\n",
    "for i in lst:\n",
    "    #plotting all the segments\n",
    "    fig, ax = plt.subplots(figsize = (12, 8))\n",
    "    sns.boxplot(x = 'race',\n",
    "                y = i,\n",
    "                hue = 'Cluster',\n",
    "                data = data_df)\n",
    "\n",
    "    plt.title(i)\n",
    "    # formatting and displaying the plot\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aee7ebfe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
